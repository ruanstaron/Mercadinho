package tech.pucci.mercadinho.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LISTA_DE_PRODUTOS".
*/
public class Lista_de_produtosDao extends AbstractDao<Lista_de_produtos, Long> {

    public static final String TABLENAME = "LISTA_DE_PRODUTOS";

    /**
     * Properties of entity Lista_de_produtos.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cod_barras = new Property(1, Long.class, "cod_barras", false, "COD_BARRAS");
        public final static Property ListaId = new Property(2, Long.class, "listaId", false, "LISTA_ID");
        public final static Property Cnpj = new Property(3, Long.class, "cnpj", false, "CNPJ");
        public final static Property SituacaoId = new Property(4, Long.class, "situacaoId", false, "SITUACAO_ID");
        public final static Property Quantidade = new Property(5, Float.class, "quantidade", false, "QUANTIDADE");
        public final static Property Valor = new Property(6, Float.class, "valor", false, "VALOR");
        public final static Property Valor_nota = new Property(7, Float.class, "valor_nota", false, "VALOR_NOTA");
        public final static Property Data_da_compra = new Property(8, java.util.Date.class, "data_da_compra", false, "DATA_DA_COMPRA");
        public final static Property Recente = new Property(9, Boolean.class, "recente", false, "RECENTE");
    }

    private DaoSession daoSession;


    public Lista_de_produtosDao(DaoConfig config) {
        super(config);
    }
    
    public Lista_de_produtosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LISTA_DE_PRODUTOS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"COD_BARRAS\" INTEGER," + // 1: cod_barras
                "\"LISTA_ID\" INTEGER," + // 2: listaId
                "\"CNPJ\" INTEGER," + // 3: cnpj
                "\"SITUACAO_ID\" INTEGER," + // 4: situacaoId
                "\"QUANTIDADE\" REAL," + // 5: quantidade
                "\"VALOR\" REAL," + // 6: valor
                "\"VALOR_NOTA\" REAL," + // 7: valor_nota
                "\"DATA_DA_COMPRA\" INTEGER," + // 8: data_da_compra
                "\"RECENTE\" INTEGER);"); // 9: recente
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LISTA_DE_PRODUTOS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Lista_de_produtos entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long cod_barras = entity.getCod_barras();
        if (cod_barras != null) {
            stmt.bindLong(2, cod_barras);
        }
 
        Long listaId = entity.getListaId();
        if (listaId != null) {
            stmt.bindLong(3, listaId);
        }
 
        Long cnpj = entity.getCnpj();
        if (cnpj != null) {
            stmt.bindLong(4, cnpj);
        }
 
        Long situacaoId = entity.getSituacaoId();
        if (situacaoId != null) {
            stmt.bindLong(5, situacaoId);
        }
 
        Float quantidade = entity.getQuantidade();
        if (quantidade != null) {
            stmt.bindDouble(6, quantidade);
        }
 
        Float valor = entity.getValor();
        if (valor != null) {
            stmt.bindDouble(7, valor);
        }
 
        Float valor_nota = entity.getValor_nota();
        if (valor_nota != null) {
            stmt.bindDouble(8, valor_nota);
        }
 
        java.util.Date data_da_compra = entity.getData_da_compra();
        if (data_da_compra != null) {
            stmt.bindLong(9, data_da_compra.getTime());
        }
 
        Boolean recente = entity.getRecente();
        if (recente != null) {
            stmt.bindLong(10, recente ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Lista_de_produtos entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long cod_barras = entity.getCod_barras();
        if (cod_barras != null) {
            stmt.bindLong(2, cod_barras);
        }
 
        Long listaId = entity.getListaId();
        if (listaId != null) {
            stmt.bindLong(3, listaId);
        }
 
        Long cnpj = entity.getCnpj();
        if (cnpj != null) {
            stmt.bindLong(4, cnpj);
        }
 
        Long situacaoId = entity.getSituacaoId();
        if (situacaoId != null) {
            stmt.bindLong(5, situacaoId);
        }
 
        Float quantidade = entity.getQuantidade();
        if (quantidade != null) {
            stmt.bindDouble(6, quantidade);
        }
 
        Float valor = entity.getValor();
        if (valor != null) {
            stmt.bindDouble(7, valor);
        }
 
        Float valor_nota = entity.getValor_nota();
        if (valor_nota != null) {
            stmt.bindDouble(8, valor_nota);
        }
 
        java.util.Date data_da_compra = entity.getData_da_compra();
        if (data_da_compra != null) {
            stmt.bindLong(9, data_da_compra.getTime());
        }
 
        Boolean recente = entity.getRecente();
        if (recente != null) {
            stmt.bindLong(10, recente ? 1L: 0L);
        }
    }

    @Override
    protected final void attachEntity(Lista_de_produtos entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Lista_de_produtos readEntity(Cursor cursor, int offset) {
        Lista_de_produtos entity = new Lista_de_produtos( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // cod_barras
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // listaId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // cnpj
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // situacaoId
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // quantidade
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // valor
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // valor_nota
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // data_da_compra
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0 // recente
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Lista_de_produtos entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCod_barras(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setListaId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCnpj(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setSituacaoId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setQuantidade(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setValor(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setValor_nota(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setData_da_compra(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setRecente(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Lista_de_produtos entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Lista_de_produtos entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Lista_de_produtos entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getListaDao().getAllColumns());
            builder.append(" FROM LISTA_DE_PRODUTOS T");
            builder.append(" LEFT JOIN LISTA T0 ON T.\"LISTA_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Lista_de_produtos loadCurrentDeep(Cursor cursor, boolean lock) {
        Lista_de_produtos entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Lista lista = loadCurrentOther(daoSession.getListaDao(), cursor, offset);
        entity.setLista(lista);

        return entity;    
    }

    public Lista_de_produtos loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Lista_de_produtos> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Lista_de_produtos> list = new ArrayList<Lista_de_produtos>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Lista_de_produtos> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Lista_de_produtos> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
