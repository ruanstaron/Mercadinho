package com.example.ruanstaron.mercadinho.db;

import org.greenrobot.greendao.annotation.*;

import com.example.ruanstaron.mercadinho.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "CIDADE".
 */
@Entity(active = true)
public class Cidade {

    @Id
    private Long id;
    private Long estadoId;
    private String descricao;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient CidadeDao myDao;

    @ToOne(joinProperty = "estadoId")
    private Estado estado;

    @Generated
    private transient Long estado__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Cidade() {
    }

    public Cidade(Long id) {
        this.id = id;
    }

    @Generated
    public Cidade(Long id, Long estadoId, String descricao) {
        this.id = id;
        this.estadoId = estadoId;
        this.descricao = descricao;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCidadeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getEstadoId() {
        return estadoId;
    }

    public void setEstadoId(Long estadoId) {
        this.estadoId = estadoId;
    }

    public String getDescricao() {
        return descricao;
    }

    public void setDescricao(String descricao) {
        this.descricao = descricao;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Estado getEstado() {
        Long __key = this.estadoId;
        if (estado__resolvedKey == null || !estado__resolvedKey.equals(__key)) {
            __throwIfDetached();
            EstadoDao targetDao = daoSession.getEstadoDao();
            Estado estadoNew = targetDao.load(__key);
            synchronized (this) {
                estado = estadoNew;
            	estado__resolvedKey = __key;
            }
        }
        return estado;
    }

    @Generated
    public void setEstado(Estado estado) {
        synchronized (this) {
            this.estado = estado;
            estadoId = estado == null ? null : estado.getId();
            estado__resolvedKey = estadoId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
