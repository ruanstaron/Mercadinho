package com.example.ruanstaron.mercadinho.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUTOS".
*/
public class ProdutosDao extends AbstractDao<Produtos, Void> {

    public static final String TABLENAME = "PRODUTOS";

    /**
     * Properties of entity Produtos.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Cod_barras = new Property(0, Long.class, "cod_barras", false, "COD_BARRAS");
        public final static Property Descricao = new Property(1, String.class, "descricao", false, "DESCRICAO");
        public final static Property Manual = new Property(2, Boolean.class, "Manual", false, "MANUAL");
        public final static Property Cod_barras = new Property(3, Long.class, "cod_barras", false, "COD_BARRAS");
    }

    private Query<Produtos> compras_ProdutosListQuery;

    public ProdutosDao(DaoConfig config) {
        super(config);
    }
    
    public ProdutosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUTOS\" (" + //
                "\"COD_BARRAS\" INTEGER," + // 0: cod_barras
                "\"DESCRICAO\" TEXT," + // 1: descricao
                "\"MANUAL\" INTEGER," + // 2: Manual
                "\"COD_BARRAS\" INTEGER);"); // 3: cod_barras
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUTOS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Produtos entity) {
        stmt.clearBindings();
 
        Long cod_barras = entity.getCod_barras();
        if (cod_barras != null) {
            stmt.bindLong(1, cod_barras);
        }
 
        String descricao = entity.getDescricao();
        if (descricao != null) {
            stmt.bindString(2, descricao);
        }
 
        Boolean Manual = entity.getManual();
        if (Manual != null) {
            stmt.bindLong(3, Manual ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Produtos entity) {
        stmt.clearBindings();
 
        Long cod_barras = entity.getCod_barras();
        if (cod_barras != null) {
            stmt.bindLong(1, cod_barras);
        }
 
        String descricao = entity.getDescricao();
        if (descricao != null) {
            stmt.bindString(2, descricao);
        }
 
        Boolean Manual = entity.getManual();
        if (Manual != null) {
            stmt.bindLong(3, Manual ? 1L: 0L);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Produtos readEntity(Cursor cursor, int offset) {
        Produtos entity = new Produtos( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // cod_barras
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // descricao
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0 // Manual
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Produtos entity, int offset) {
        entity.setCod_barras(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescricao(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setManual(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Produtos entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Produtos entity) {
        return null;
    }

    @Override
    public boolean hasKey(Produtos entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "produtosList" to-many relationship of Compras. */
    public List<Produtos> _queryCompras_ProdutosList(Long cod_barras) {
        synchronized (this) {
            if (compras_ProdutosListQuery == null) {
                QueryBuilder<Produtos> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Cod_barras.eq(null));
                compras_ProdutosListQuery = queryBuilder.build();
            }
        }
        Query<Produtos> query = compras_ProdutosListQuery.forCurrentThread();
        query.setParameter(0, cod_barras);
        return query.list();
    }

}
