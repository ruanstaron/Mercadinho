package com.example.ruanstaron.mercadinho.db;

import org.greenrobot.greendao.annotation.*;

import com.example.ruanstaron.mercadinho.db.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "MERCADO".
 */
@Entity(active = true)
public class Mercado {

    @Id
    private Long cnpj;
    private Long cidadeId;
    private String descricao;
    private Boolean recente;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient MercadoDao myDao;

    @ToOne(joinProperty = "cidadeId")
    private Cidade cidade;

    @Generated
    private transient Long cidade__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Mercado() {
    }

    public Mercado(Long cnpj) {
        this.cnpj = cnpj;
    }

    @Generated
    public Mercado(Long cnpj, Long cidadeId, String descricao, Boolean recente) {
        this.cnpj = cnpj;
        this.cidadeId = cidadeId;
        this.descricao = descricao;
        this.recente = recente;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMercadoDao() : null;
    }

    public Long getCnpj() {
        return cnpj;
    }

    public void setCnpj(Long cnpj) {
        this.cnpj = cnpj;
    }

    public Long getCidadeId() {
        return cidadeId;
    }

    public void setCidadeId(Long cidadeId) {
        this.cidadeId = cidadeId;
    }

    public String getDescricao() {
        return descricao;
    }

    public void setDescricao(String descricao) {
        this.descricao = descricao;
    }

    public Boolean getRecente() {
        return recente;
    }

    public void setRecente(Boolean recente) {
        this.recente = recente;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Cidade getCidade() {
        Long __key = this.cidadeId;
        if (cidade__resolvedKey == null || !cidade__resolvedKey.equals(__key)) {
            __throwIfDetached();
            CidadeDao targetDao = daoSession.getCidadeDao();
            Cidade cidadeNew = targetDao.load(__key);
            synchronized (this) {
                cidade = cidadeNew;
            	cidade__resolvedKey = __key;
            }
        }
        return cidade;
    }

    @Generated
    public void setCidade(Cidade cidade) {
        synchronized (this) {
            this.cidade = cidade;
            cidadeId = cidade == null ? null : cidade.getId();
            cidade__resolvedKey = cidadeId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
