package com.example.ruanstaron.mercadinho.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUTO".
*/
public class ProdutoDao extends AbstractDao<Produto, Long> {

    public static final String TABLENAME = "PRODUTO";

    /**
     * Properties of entity Produto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Cod_barras = new Property(0, Long.class, "cod_barras", true, "COD_BARRAS");
        public final static Property Descricao = new Property(1, String.class, "descricao", false, "DESCRICAO");
        public final static Property Descricao_usuario = new Property(2, String.class, "descricao_usuario", false, "DESCRICAO_USUARIO");
        public final static Property Recente = new Property(3, Boolean.class, "recente", false, "RECENTE");
    }

    private Query<Produto> lista_de_produtos_ProdutoListQuery;

    public ProdutoDao(DaoConfig config) {
        super(config);
    }
    
    public ProdutoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUTO\" (" + //
                "\"COD_BARRAS\" INTEGER PRIMARY KEY ," + // 0: cod_barras
                "\"DESCRICAO\" TEXT," + // 1: descricao
                "\"DESCRICAO_USUARIO\" TEXT," + // 2: descricao_usuario
                "\"RECENTE\" INTEGER);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUTO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Produto entity) {
        stmt.clearBindings();
 
        Long cod_barras = entity.getCod_barras();
        if (cod_barras != null) {
            stmt.bindLong(1, cod_barras);
        }
 
        String descricao = entity.getDescricao();
        if (descricao != null) {
            stmt.bindString(2, descricao);
        }
 
        String descricao_usuario = entity.getDescricao_usuario();
        if (descricao_usuario != null) {
            stmt.bindString(3, descricao_usuario);
        }
 
        Boolean recente = entity.getRecente();
        if (recente != null) {
            stmt.bindLong(4, recente ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Produto entity) {
        stmt.clearBindings();
 
        Long cod_barras = entity.getCod_barras();
        if (cod_barras != null) {
            stmt.bindLong(1, cod_barras);
        }
 
        String descricao = entity.getDescricao();
        if (descricao != null) {
            stmt.bindString(2, descricao);
        }
 
        String descricao_usuario = entity.getDescricao_usuario();
        if (descricao_usuario != null) {
            stmt.bindString(3, descricao_usuario);
        }
 
        Boolean recente = entity.getRecente();
        if (recente != null) {
            stmt.bindLong(4, recente ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Produto readEntity(Cursor cursor, int offset) {
        Produto entity = new Produto( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // cod_barras
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // descricao
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // descricao_usuario
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0 // recente
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Produto entity, int offset) {
        entity.setCod_barras(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescricao(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescricao_usuario(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRecente(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Produto entity, long rowId) {
        entity.setCod_barras(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Produto entity) {
        if(entity != null) {
            return entity.getCod_barras();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Produto entity) {
        return entity.getCod_barras() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "produtoList" to-many relationship of Lista_de_produtos. */
    public List<Produto> _queryLista_de_produtos_ProdutoList(Long cod_barras) {
        synchronized (this) {
            if (lista_de_produtos_ProdutoListQuery == null) {
                QueryBuilder<Produto> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Cod_barras.eq(null));
                lista_de_produtos_ProdutoListQuery = queryBuilder.build();
            }
        }
        Query<Produto> query = lista_de_produtos_ProdutoListQuery.forCurrentThread();
        query.setParameter(0, cod_barras);
        return query.list();
    }

}
